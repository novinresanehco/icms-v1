<?php

declare(strict_types=1);

namespace App\Repositories;

use App\Models\Menu;
use App\Models\MenuItem;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
use App\Repositories\Interfaces\MenuRepositoryInterface;

class MenuRepository implements MenuRepositoryInterface
{
    private const CACHE_PREFIX = 'menu:';
    private const CACHE_TTL = 3600;

    public function __construct(
        private readonly Menu $model,
        private readonly MenuItem $itemModel
    ) {}

    public function findById(int $id): ?Menu
    {
        return Cache::remember(
            self::CACHE_PREFIX . $id,
            self::CACHE_TTL,
            fn () => $this->model->with('items')->find($id)
        );
    }

    public function findByLocation(string $location): ?Menu
    {
        return Cache::remember(
            self::CACHE_PREFIX . "location:{$location}",
            self::CACHE_TTL,
            fn () => $this->model->with('items')->where('location', $location)->first()
        );
    }

    public function create(array $data): Menu
    {
        return DB::transaction(function () use ($data) {
            $menu = $this->model->create([
                'name' => $data['name'],
                'location' => $data['location'],
                'description' => $data['description'] ?? null,
                'status' => $data['status'] ?? 'active'
            ]);

            if (isset($data['items'])) {
                $this->createMenuItems($menu->id, $data['items']);
            }

            $this->clearCache();

            return $menu;
        });
    }

    public function update(int $id, array $data): bool
    {
        return DB::transaction(function () use ($id, $data) {
            $menu = $this->findById($id);
            
            if (!$menu) {
                return false;
            }

            $updated = $menu->update([
                'name' => $data['name'] ?? $menu->name,
                'location' => $data['location'] ?? $menu->location,
                'description' => $data['description'] ?? $menu->description,
                'status' => $data['status'] ?? $menu->status
            ]);

            if (isset($data['items'])) {
                // Remove existing items
                $this->itemModel->where('menu_id', $id)->delete();
                // Create new items
                $this->createMenuItems($id, $data['items']);
            }

            if ($updated) {
                $this->clearCache();
            }

            return $updated;
        });
    }

    public function delete(int $id): bool
    {
        return DB::transaction(function () use ($id) {
            $menu = $this->findById($id);
            
            if (!$menu) {
                return false;
            }

            // Delete menu items first
            $this->itemModel->where('menu_id', $id)->delete();
            
            $deleted = $menu->delete();

            if ($deleted) {
                $this->clearCache();
            }

            return $deleted;
        });
    }

    public function getAll(): Collection
    {
        return Cache::remember(
            self::CACHE_PREFIX . 'all',
            self::CACHE_TTL,
            fn () => $this->model->with('items')->get()
        );
    }

    public function updateItemsOrder(int $menuId, array $items): bool
    {
        return DB::transaction(function () use ($menuId, $items) {
            foreach ($items as $order => $itemId) {
                $this->itemModel->where('id', $itemId)
                    ->where('menu_id', $menuId)
                    ->update(['order' => $order]);
            }

            $this->clearCache();

            return true;
        });
    }

    protected function createMenuItems(int $menuId, array $items, ?int $parentId = null): void
    {
        foreach ($items as $order => $item) {
            $menuItem = $this->itemModel->create([
                'menu_id' => $menuId,
                'parent_id' => $parentId,
                'title' => $item['title'],
                'url' => $item['url'],
                'target' => $item['target'] ?? '_self',
                'class' => $item['class'] ?? null,
                'order' => $order
            ]);

            if (isset($item['children'])) {
                $this->createMenuItems($menuId, $item['children'], $menuItem->id);
            }
        }
    }

    protected function clearCache(): void
    {
        $keys = ['all'];
        foreach ($keys as $key) {
            Cache::forget(self::CACHE_PREFIX . $key);
        }

        // Clear location-specific caches
        $locations = $this->model->pluck('location');
        foreach ($locations as $location) {
            Cache::forget(self::CACHE_PREFIX . "location:{