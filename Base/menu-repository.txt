<?php

declare(strict_types=1);

namespace App\Repositories;

use App\Models\Menu;
use App\Models\MenuItem;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use App\Repositories\Interfaces\MenuRepositoryInterface;

class MenuRepository implements MenuRepositoryInterface
{
    private const CACHE_PREFIX = 'menu:';
    private const CACHE_TTL = 3600;

    public function __construct(
        private readonly Menu $model,
        private readonly MenuItem $itemModel
    ) {}

    public function findById(int $id): ?Menu
    {
        return Cache::remember(
            self::CACHE_PREFIX . $id,
            self::CACHE_TTL,
            fn () => $this->model->with(['items' => fn($q) => $q->orderBy('order')])->find($id)
        );
    }

    public function findByLocation(string $location): ?Menu
    {
        return Cache::remember(
            self::CACHE_PREFIX . "location:{$location}",
            self::CACHE_TTL,
            fn () => $this->model->with(['items' => fn($q) => $q->orderBy('order')])
                ->where('location', $location)
                ->first()
        );
    }

    public function create(array $data): Menu
    {
        return DB::transaction(function () use ($data) {
            $menu = $this->model->create([
                'name' => $data['name'],
                'location' => $data['location'],
                'description' => $data['description'] ?? null,
                'settings' => $data['settings'] ?? [],
                'is_active' => $data['is_active'] ?? true
            ]);

            if (isset($data['items'])) {
                $this->createMenuItems($menu->id, $data['items']);
            }

            $this->clearCache();

            return $menu;
        });
    }

    public function update(int $id, array $data): bool
    {
        return DB::transaction(function () use ($id, $data) {
            $menu = $this->findById($id);
            
            if (!$menu) {
                return false;
            }

            $updated = $menu->update([
                'name' => $data['name'] ?? $menu->name,
                'location' => $data['location'] ?? $menu->location,
                'description' => $data['description'] ?? $menu->description,
                'settings' => $data['settings'] ?? $menu->settings,
                'is_active' => $data['is_active'] ?? $menu->is_active
            ]);

            if (isset($data['items'])) {
                $this->itemModel->where('menu_id', $id)->delete();
                $this->createMenuItems($id, $data['items']);
            }

            if ($updated) {
                $this->clearCache();
            }

            return $updated;
        });
    }

    public function delete(int $id): bool
    {
        return DB::transaction(function () use ($id) {
            $menu = $this->findById($id);
            
            if (!$menu) {
                return false;
            }

            $this->itemModel->where('menu_id', $id)->delete();
            $deleted = $menu->delete();

            if ($deleted) {
                $this->clearCache();
            }

            return $deleted;
        });
    }

    public function getAll(): Collection
    {
        return Cache::remember(
            self::CACHE_PREFIX . 'all',
            self::CACHE_TTL,
            fn () => $this->model->with(['items' => fn($q) => $q->orderBy('order')])->get()
        );
    }

    public function updateItemOrder(array $items, ?int $parentId = null): bool
    {
        foreach ($items as $order => $item) {
            $this->itemModel->where('id', $item['id'])->update([
                'parent_id' => $parentId,
                'order' => $order
            ]);

            if (isset($item['children'])) {
                $this->updateItemOrder($item['children'], $item['id']);
            }
        }

        $this->clearCache();

        return true;
    }

    public function addMenuItem(int $menuId, array $data): MenuItem
    {
        $item = $this->itemModel->create([
            'menu_id' => $menuId,
            'parent_id' => $data['parent_id'] ?? null,
            'title' => $data['title'],
            'url' => $data['url'],
            'target' => $data['target'] ?? '_self',
            'icon' => $data['icon'] ?? null,
            'class' => $data['class'] ?? null,
            'order' => $data['order'] ?? 0,
            'conditions' => $data['conditions'] ?? [],
            'is_active' => $data['is_active'] ?? true
        ]);

        $this->clearCache();

        return $item;
    }

    public function updateMenuItem(int $itemId, array $data): bool
    {
        $item = $this->itemModel->find($itemId);

        if (!$item) {
            return false;
        }

        $updated = $item->update([
            'parent_id' => $data['parent_id'] ?? $item->parent_id,
            'title' => $data['title'] ?? $item->title,
            'url' => $data['url'] ?? $item->url,
            'target' => $data['target'] ?? $item->target,
            'icon' => $data['icon'] ?? $item->icon,
            'class' => $data['class'] ?? $item->class,
            'order' => $data['order'] ?? $item->order,
            'conditions' => $data['conditions'] ?? $item->conditions,
            'is_active' => $data['is_active'] ?? $item->is_active
        ]);

        if ($updated) {
            $this->clearCache();
        }

        return $updated;
    }

    protected function createMenuItems(int $menuId, array $items, ?int $parentId = null): void
    {
        foreach ($items as $order => $item) {
            $menuItem = $this->itemModel->create([
                'menu_id' => $menuId,
                'parent_id' => $parentId,
                'title' => $item['title'],
                'url' => $item['url'],
                'target' => $item['target'] ?? '_self',
                'icon' => $item['icon'] ?? null,
                'class' => $item['class'] ?? null,
                'order' => $order,
                'conditions' => $item['conditions'] ?? [],
                'is_active' => $item['is_active'] ?? true
            ]);

            if (isset($item['children'])) {
                $this->createMenuItems($menuId, $item['children'], $menuItem->id);
            }
        }
    }

    protected function clearCache(): void
    {
        $keys = ['all'];
        foreach ($keys as $key) {
            Cache::forget(self::CACHE_PREFIX . $key);
        }

        $locations = $this->model->pluck('location');
        foreach ($locations as $location) {
            Cache::forget(self::CACHE_PREFIX . "location:{$location}");
        }
    }
}