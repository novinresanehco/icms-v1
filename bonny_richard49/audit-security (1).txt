<?php
namespace App\Core\Audit;

class AuditLogger implements AuditInterface
{
    private LogHandler $handler;
    private SecurityConfig $config;
    private MetricsCollector $metrics;

    public function logAccess(AccessContext $context): void
    {
        $this->log('access', [
            'user' => $context->getUserId(),
            'resource' => $context->getResource(),
            'action' => $context->getAction(),
            'ip' => $context->getIpAddress(),
            'timestamp' => time()
        ]);
    }

    public function logSecurityEvent(SecurityEvent $event): void
    {
        $this->log('security', [
            'type' => $event->getType(),
            'severity' => $event->getSeverity(),
            'details' => $event->getDetails(),
            'timestamp' => time()
        ]);

        if ($event->isCritical()) {
            $this->notifySecurityTeam($event);
        }
    }

    public function logOperation(OperationContext $context): void
    {
        $this->log('operation', [
            'type' => $context->getType(),
            'user' => $context->getUserId(),
            'data' => $context->getData(),
            'result' => $context->getResult(),
            'duration' => $context->getDuration(),
            'timestamp' => time()
        ]);

        $this->metrics->recordOperation(
            $context->getType(),
            $context->getDuration()
        );
    }

    private function log(string $type, array $data): void
    {
        $entry = [
            'type' => $type,
            'environment' => $this->config->getEnvironment(),
            'data' => $data,
        ];

        $this->handler->write($entry);
    }

    private function notifySecurityTeam(SecurityEvent $event): void
    {
        // Implementation for security team notification
    }
}

class SecurityEvent
{
    private string $type;
    private string $severity;
    private array $details;
    private \DateTimeImmutable $timestamp;

    public function __construct(
        string $type,
        string $severity,
        array $details
    ) {
        $this->type = $type;
        $this->severity = $severity;
        $this->details = $details;
        $this->timestamp = new \DateTimeImmutable();
    }

    public function isCritical(): bool
    {
        return $this->severity === 'critical';
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function getSeverity(): string
    {
        return $this->severity;
    }

    public function getDetails(): array
    {
        return $this->details;
    }

    public function getTimestamp(): \DateTimeImmutable
    {
        return $this->timestamp;
    }
}

interface AuditInterface
{
    public function logAccess(AccessContext $context): void;
    public function logSecurityEvent(SecurityEvent $event): void;
    public function logOperation(OperationContext $context): void;
}

class AccessContext
{
    private int $userId;
    private string $resource;
    private string $action;
    private string $ipAddress;

    public function getUserId(): int
    {
        return $this->userId;