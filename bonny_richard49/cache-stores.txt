<?php

namespace App\Core\Cache\Stores;

abstract class CacheStore
{
    protected Config $config;
    protected string $prefix;
    protected array $tags = [];

    public function __construct(Config $config)
    {
        $this->config = $config;
        $this->prefix = $config->get('cache.prefix', '');
    }

    abstract public function get(string $key);
    abstract public function put(string $key, $value, $ttl = null): bool;
    abstract public function forget(string $key): bool;
    abstract public function flush(): bool;

    public function many(array $keys): array
    {
        $values = [];

        foreach ($keys as $key) {
            $values[$key] = $this->get($key);
        }

        return $values;
    }

    public function putMany(array $values, $ttl = null): bool
    {
        $success = true;

        foreach ($values as $key => $value) {
            if (!$this->put($key, $value, $ttl)) {
                $success = false;
            }
        }

        return $success;
    }

    public function tags(array $names): TaggedCache
    {
        return new TaggedCache($this, $names);
    }

    protected function itemKey(string $key): string
    {
        return $this->prefix . $key;
    }
}

class RedisStore extends CacheStore
{
    protected Redis $redis;
    protected Serializer $serializer;

    public function get(string $key)
    {
        $value = $this->redis->get($this->itemKey($key));

        if ($value === false) {
            return null;
        }

        return $this->serializer->unserialize($value);
    }

    public function put(string $key, $value, $ttl = null): bool
    {
        $key = $this->itemKey($key);
        $value = $this->serializer->serialize($value);

        if ($ttl === null) {
            return $this->redis->set($key, $value);
        }

        return $this->redis->setex(
            $key,
            (int) max(1, $ttl),
            $value
        );
    }

    public function forget(string $key): bool
    {
        return (bool) $this->redis->del($this->itemKey($key));
    }

    public function flush(): bool
    {
        return $this->redis->flushdb();
    }

    public function tags(array $names): TaggedCache
    {
        return new RedisTaggedCache($this, $names);
    }
}

class MemcachedStore extends CacheStore
{
    protected Memcached $memcached;
    protected Serializer $serializer;

    public function get(string $key)
    {
        $value = $this->memcached->get($this->itemKey($key));

        if ($value === false && $this->memcached->getResultCode() === Memcached::RES_NOTFOUND) {
            return null;
        }

        return $this->serializer->unserialize($value);
    }

    public function put(string $key, $value, $ttl = null): bool
    {
        $key = $this->itemKey($key);
        $value = $this->serializer->serialize($value);

        return $this->memcached->set(
            $key,
            $value,
            $ttl === null ? 0 : (int) max(1, $ttl)
        );
    }

    public function forget(string $key): bool
    {
        return $this->memcached->delete($this->itemKey($key));
    }

    public function flush(): bool
    {
        return $this->memcached->flush();
    }
}

class FileStore extends CacheStore
{
    protected Filesystem $files;
    protected string $directory;
    protected Serializer $serializer;

    public function get(string $key)
    {
        $path = $this->path($key);

        if (!$this->files->exists($path)) {
            return null;
        }

        $contents = $this->files->get($path);
        $data = $this->serializer->unserialize($contents);

        if ($this->isExpired($data)) {
            $this->forget($key);
            return null;
        }

        return $data['value'];
    }

    public function put(string $key, $value, $ttl = null): bool
    {
        $path = $this->path($key);
        $directory = dirname($path);

        if (!$this->files->exists($directory)) {
            $this->files->makeDirectory($directory, 0777, true);
        }

        $data = [
            'value' => $value,
            'expiration' => $ttl ? time() + $ttl : null
        ];

        return $this->files->put(
            $path,
            $this->serializer->serialize($data)
        ) !== false;
    }

    public function forget(string $key): bool
    {
        return $this->files->delete($this->path($key));
    }

    public function flush(): bool
    {
        if (!$this->files->exists($this->directory)) {
            return false;
        }

        foreach ($this->files->directories($this->directory) as $directory) {
            $this->files->deleteDirectory($directory);
        }

        return true;
    }

    protected function path(string $key): string
    {
        $hash = sha1($this->itemKey($key));
        return $this->directory . '/' . substr($hash, 0, 2) . '/' . $hash;
    }

    protected function isExpired(array $data): bool
    {
        return isset($data['expiration']) && time() >= $data['expiration'];
    }
}

class TaggedCache
{
    protected CacheStore $store;
    protected array $tags;

    public function __construct(CacheStore $store, array $tags)
    {
        $this->store = $store;
        $this->tags = $tags;
    }

    public function get(string $key)
    {
        $taggedKey = $this->taggedItemKey($key);
        return $this->store->get($taggedKey);
    }

    public function put(string $key, $value, $ttl = null): bool
    {
        $taggedKey = $this