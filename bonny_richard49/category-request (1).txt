<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use App\Core\Validation\ValidationService;

class CategoryRequest extends FormRequest
{
    protected ValidationService $validator;

    public function __construct(ValidationService $validator)
    {
        $this->validator = $validator;
    }

    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return match ($this->method()) {
            'POST' => $this->createRules(),
            'PUT', 'PATCH' => $this->updateRules(),
            'MOVE' => $this->moveRules(),
            'VALIDATE' => $this->validatePathRules(),
            default => []
        };
    }

    protected function createRules(): array
    {
        return [
            'name' => 'required|string|max:255|unique:categories',
            'parent_id' => 'nullable|exists:categories,id',
            'order' => 'nullable|integer',
            'description' => 'nullable|string',
            'meta_title' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
            'status' => 'required|in:active,inactive'
        ];
    }

    protected function updateRules(): array
    {
        $categoryId = $this->route('id');
        return [
            'name' => "sometimes|string|max:255|unique:categories,name,{$categoryId}",
            'parent_id' => 'nullable|exists:categories,id',
            'order' => 'nullable|integer',
            'description' => 'nullable|string',
            'meta_title' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
            'status' => 'sometimes|in:active,inactive'
        ];
    }

    protected function moveRules(): array
    {
        return [
            'parent_id' => 'nullable|exists:categories,id',
            'order' => 'required|integer|min:1'
        ];
    }

    protected function validatePathRules(): array
    {
        return [
            'path' => 'required|array',
            'path.*' => 'required|exists:categories,id'
        ];
    }

    public function messages(): array
    {
        return [
            'name.required' => 'Category name is required',
            'name.max' => 'Category name cannot exceed 255 characters',
            'name.unique' => 'Category name already exists',
            'parent_id.exists' => 'Invalid parent category',
            'order.integer' => 'Order must be a number',
            'status.required' => 'Status is required',
            'status.in' => 'Invalid status value',
            'path.required' => 'Path is required',
            'path.array' => 'Path must be an array',
            'path.*.exists' => 'Invalid category in path'
        ];
    }
}
