<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use App\Core\Validation\ValidationService;

class ContentRequest extends FormRequest
{
    protected ValidationService $validator;

    public function __construct(ValidationService $validator)
    {
        $this->validator = $validator;
    }

    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return match ($this->method()) {
            'POST' => $this->createRules(),
            'PUT', 'PATCH' => $this->updateRules(),
            'GET' => $this->searchRules(),
            default => []
        };
    }

    protected function createRules(): array
    {
        return [
            'title' => 'required|string|max:255',
            'body' => 'required|string',
            'status' => 'required|in:draft,review,published',
            'author_id' => 'required|exists:users,id',
            'category_id' => 'required|exists:categories,id',
            'tags' => 'array',
            'tags.*' => 'exists:tags,id',
            'publish_at' => 'nullable|date|after:now',
            'meta_description' => 'nullable|string|max:160',
            'meta_keywords' => 'nullable|string|max:255'
        ];
    }

    protected function updateRules(): array
    {
        return [
            'title' => 'sometimes|string|max:255',
            'body' => 'sometimes|string',
            'status' => 'sometimes|in:draft,review,published',
            'category_id' => 'sometimes|exists:categories,id',
            'tags' => 'sometimes|array',
            'tags.*' => 'exists:tags,id',
            'publish_at' => 'nullable|date|after:now',
            'meta_description' => 'nullable|string|max:160',
            'meta_keywords' => 'nullable|string|max:255'
        ];
    }

    protected function searchRules(): array
    {
        return [
            'title' => 'nullable|string|max:255',
            'status' => 'nullable|in:draft,review,published',
            'category_id' => 'nullable|exists:categories,id',
            'author_id' => 'nullable|exists:users,id',
            'date_from' => 'nullable|date',
            'date_to' => 'nullable|date|after:date_from',
            'tags' => 'nullable|array',
            'tags.*' => 'exists:tags,id'
        ];
    }

    public function messages(): array
    {
        return [
            'title.required' => 'Title is required',
            'title.max' => 'Title cannot exceed 255 characters',
            'body.required' => 'Content body is required',
            'status.required' => 'Status is required',
            'status.in' => 'Invalid status value',
            'author_id.required' => 'Author is required',
            'author_id.exists' => 'Invalid author',
            'category_id.required' => 'Category is required',
            'category_id.exists' => 'Invalid category',
            'tags.array' => 'Tags must be an array',
            'tags.*.exists' => 'Invalid tag',
            'publish_at.date' => 'Invalid publish date',
            'publish_at.after' => 'Publish date must be in the future',
            'meta_description.max' => 'Meta description cannot exceed 160 characters',
            'meta_keywords.max' => 'Meta keywords cannot exceed 255 characters'
        ];
    }

    protected function prepareForValidation(): void
    {
        if ($this->has('tags') && is_string($this->input('tags'))) {
            $this->merge([
                'tags' => array_filter(explode(',', $this->input('tags')))
            ]);
        }
    }
}
