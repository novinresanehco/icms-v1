<?php

namespace App\Jobs;

use App\Models\Media;
use App\Core\Media\MediaManager;
use App\Core\Security\SecurityManager;
use App\Core\Events\EventDispatcher;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

class ProcessMediaOptimization implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    private Media $media;
    private array $options;
    public $timeout = 3600;
    public $tries = 3;

    public function __construct(Media $media, array $options = [])
    {
        $this->media = $media;
        $this->options = $options;
    }

    public function handle(
        MediaManager $mediaManager,
        SecurityManager $security,
        EventDispatcher $events
    ): void {
        try {
            $security->validateOperation('media.optimize');
            $mediaManager->processOptimizations($this->media);
            $events->dispatch('media.optimized', $this->media);
            
        } catch (\Exception $e) {
            $events->dispatch('media.optimization_failed', [
                'media' => $this->media,
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
    }

    public function failed(\Exception $e): void
    {
        app(EventDispatcher::class)->dispatch('media.optimization_failed', [
            'media' => $this->media,
            'error' => $e->getMessage(),
            'attempts' => $this->attempts()
        ]);
    }
}

class GenerateMediaThumbnails implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    private Media $media;
    private array $sizes;
    public $timeout = 1800;
    public $tries = 3;

    public function __construct(Media $media, array $sizes = [])
    {
        $this->media = $media;
        $this->sizes = $sizes ?: config('media.thumbnail_sizes');
    }

    public function handle(
        MediaManager $mediaManager,
        SecurityManager $security,
        EventDispatcher $events
    ): void {
        try {
            $security->validateOperation('media.thumbnails');
            $mediaManager->generateThumbnails($this->media);
            $events->dispatch('media.thumbnails_generated', $this->media);
            
        } catch (\Exception $e) {
            $events->dispatch('media.thumbnail_generation_failed', [
                'media' => $this->media,
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
    }

    public function failed(\Exception $e): void
    {
        app(EventDispatcher::class)->dispatch('media.thumbnail_generation_failed', [
            'media' => $this->media,
            'error' => $e->getMessage(),
            'attempts' => $this->attempts()
        ]);
    }
}

class CleanupMediaStorage implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public $timeout = 7200;
    public $tries = 1;

    public function handle(
        MediaManager $mediaManager,
        SecurityManager $security,
        EventDispatcher $events
    ): void {
        try {
            $security->validateOperation('media.cleanup');
            
            // Clean orphaned files
            $this->cleanOrphanedFiles($mediaManager);
            
            // Clean expired temporary files
            $this->cleanTemporaryFiles($mediaManager);
            
            // Optimize storage usage
            $this->optimizeStorage($mediaManager);
            
            $events->dispatch('media.cleanup_completed');
            
        } catch (\Exception $e) {
            $events->dispatch('media.cleanup_failed', [
                'error' => $e->getMessage()
            ]);
            throw $e;
        }
    }

    private function cleanOrphanedFiles(MediaManager $mediaManager): void
    {
        $files = Media::whereNull('deleted_at')
            ->whereNotExists(function ($query) {
                $query->select('id')
                    ->from('mediables')
                    ->whereRaw('media.id = mediables.media_id');
            })
            ->get();

        foreach ($files as $file) {
            $mediaManager->delete($file);
        }
    }

    private function cleanTemporaryFiles(MediaManager $mediaManager): void
    {
        $expiredFiles = Media::where('temporary', true)
            ->where('created_at', '<', now()->subDays(1))
            ->get();

        foreach ($expiredFiles as $file) {
            $mediaManager->delete($file);
        }
    }

    private function optimizeStorage(MediaManager $mediaManager): void
    {
        // Implement storage optimization logic
    }

    public function failed(\Exception $e): void
    {
        app(EventDispatcher::class)->dispatch('media.cleanup_failed', [
            'error' => $e->getMessage()
        ]);
    }
}
