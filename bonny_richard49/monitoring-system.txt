namespace App\Core\Monitoring;

class SystemMonitor
{
    private MetricsCollector $metrics;
    private AlertManager $alerts;
    private ConfigManager $config;
    private Logger $logger;

    public function monitorOperation(string $operation, callable $callback): mixed 
    {
        $startTime = microtime(true);
        
        try {
            $result = $callback();
            $this->recordSuccess($operation, microtime(true) - $startTime);
            return $result;
            
        } catch (\Exception $e) {
            $this->recordFailure($operation, $e);
            throw $e;
        }
    }

    private function recordSuccess(string $operation, float $duration): void 
    {
        $this->metrics->record([
            'operation' => $operation,
            'duration' => $duration,
            'status' => 'success',
            'timestamp' => time()
        ]);

        if ($duration > $this->config->get('thresholds.operation_duration')) {
            $this->alerts->warning("Operation $operation exceeded duration threshold");
        }
    }

    private function recordFailure(string $operation, \Exception $e): void 
    {
        $this->metrics->record([
            'operation' => $operation,
            'error' => $e->getMessage(),
            'status' => 'failure',
            'timestamp' => time()
        ]);

        $this->alerts->critical("Operation $operation failed", [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);
    }

    public function checkSystem(): void 
    {
        $metrics = [
            'cpu' => $this->getCpuUsage(),
            'memory' => $this->getMemoryUsage(),
            'disk' => $this->getDiskUsage()
        ];

        foreach ($metrics as $metric => $value) {
            if ($value > $this->config->get("thresholds.$metric")) {
                $this->alerts->warning("High $metric usage: $value%");
            }
        }

        $this->metrics->record('system_status', $metrics);
    }

    private function getCpuUsage(): float 
    {
        return sys_getloadavg()[0] * 100;
    }

    private function getMemoryUsage(): float 
    {
        return memory_get_usage(true) / memory_get_peak_usage(true) * 100;
    }

    private function getDiskUsage(): float 
    {
        $total = disk_total_space('/');
        $free = disk_free_space('/');
        return ($total - $free) / $total * 100;
    }
}

class MetricsCollector
{
    private MetricsStore $store;
    private AlertManager $alerts;

    public function record(string $metric, $value, array $tags = []): void 
    {
        $data = [
            'metric' => $metric,
            'value' => $value,
            'tags' => $tags,
            'timestamp' => time()
        ];

        $this->store->save($data);
    }

    public function incrementCounter(string $metric, array $tags = []): void 
    {
        $this->record($metric, 1, $tags);
    }

    public function observeHistogram(string $metric, float $value, array $tags = []): void 
    {
        $this->record($metric, $value, $tags);
    }
}

class AlertManager
{
    private NotificationService $notifications;
    private Logger $logger;
    private ConfigManager $config;

    public function critical(string $message, array $context = []): void 
    {
        $this->alert('critical', $message, $context);
    }

    public function warning(string $message, array $context = []): void 
    {
        $this->alert('warning', $message, $context);
    }

    private function alert(string $level, string $message, array $context): void 
    {
        $this->logger->log($level, $