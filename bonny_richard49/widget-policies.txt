// app/Core/Widget/Policies/WidgetPolicy.php
<?php

namespace App\Core\Widget\Policies;

use App\Core\Widget\Models\Widget;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class WidgetPolicy
{
    use HandlesAuthorization;

    public function viewAny(User $user): bool
    {
        return $user->can('view_widgets');
    }

    public function view(User $user, Widget $widget): bool
    {
        if ($user->can('manage_widgets')) {
            return true;
        }

        return $this->checkUserPermissions($user, $widget);
    }

    public function create(User $user): bool
    {
        return $user->can('create_widgets');
    }

    public function update(User $user, Widget $widget): bool
    {
        if ($user->can('manage_widgets')) {
            return true;
        }

        return $user->can('edit_widgets') && 
               $user->id === $widget->created_by;
    }

    public function delete(User $user, Widget $widget): bool
    {
        if ($user->can('manage_widgets')) {
            return true;
        }

        return $user->can('delete_widgets') && 
               $user->id === $widget->created_by;
    }

    public function updateSettings(User $user, Widget $widget): bool
    {
        return $this->update($user, $widget);
    }

    public function updateVisibility(User $user, Widget $widget): bool
    {
        return $user->can('manage_widgets');
    }

    public function updateOrder(User $user): bool
    {
        return $user->can('manage_widgets');
    }

    private function checkUserPermissions(User $user, Widget $widget): bool
    {
        if (empty($widget->permissions)) {
            return true;
        }

        foreach ($widget->permissions as $permission) {
            if ($permission['type'] === 'role') {
                if ($user->hasRole($permission['value'])) {
                    return true;
                }
            } elseif ($permission['type'] === 'permission') {
                if ($user->can($permission['value'])) {
                    return true;
                }
            }
        }

        return false;
    }
}
