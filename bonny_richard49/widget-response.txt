// app/Core/Widget/Responses/WidgetResponse.php
<?php

namespace App\Core\Widget\Responses;

use App\Core\Widget\Models\Widget;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Collection;

class WidgetResponse
{
    public function index(Collection $widgets): JsonResponse
    {
        return response()->json([
            'data' => $widgets->map(fn($widget) => $this->formatWidget($widget)),
            'meta' => [
                'total' => $widgets->count(),
                'timestamp' => now()->toIso8601String()
            ]
        ]);
    }

    public function show(Widget $widget): JsonResponse
    {
        return response()->json([
            'data' => $this->formatWidget($widget),
            'meta' => [
                'timestamp' => now()->toIso8601String()
            ]
        ]);
    }

    public function store(Widget $widget): JsonResponse
    {
        return response()->json([
            'data' => $this->formatWidget($widget),
            'meta' => [
                'timestamp' => now()->toIso8601String()
            ]
        ], 201);
    }

    public function update(Widget $widget): JsonResponse
    {
        return response()->json([
            'data' => $this->formatWidget($widget),
            'meta' => [
                'timestamp' => now()->toIso8601String()
            ]
        ]);
    }

    public function delete(): JsonResponse
    {
        return response()->json(null, 204);
    }

    protected function formatWidget(Widget $widget): array
    {
        return [
            'id' => $widget->id,
            'name' => $widget->name,
            'identifier' => $widget->identifier,
            'type' => $widget->type,
            'area' => $widget->area,
            'settings' => $widget->settings,
            'order' => $widget->order,
            'is_active' => $widget->is_active,
            'cache_ttl' => $widget->cache_ttl,
            'visibility_rules' => $widget->visibility_rules,
            'permissions' => $widget->permissions,
            'metadata' => $widget->metadata,
            'created_at' => $widget->created_at->toIso8601String(),
            'updated_at' => $widget->updated_at->toIso8601String()
        ];
    }
}

// app/Core/Widget/Responses/WidgetMetricsResponse.php
<?php

namespace App\Core\Widget\Responses;

use App\Core\Widget\Models\Widget;
use Illuminate\Http\JsonResponse;

class WidgetMetricsResponse 
{
    public function show(Widget $widget, array $metrics): JsonResponse
    {
        return response()->json([
            'data' => [
                'widget_id' => $widget->id,
                'metrics' => $this->formatMetrics($metrics),
                'period' => [
                    'start' => $metrics['start_date'] ?? null,
                    'end' => $metrics['end_date'] ?? null
                ]
            ],
            'meta' => [
                'timestamp' => now()->toIso8601String()
            ]
        ]);
    }

    protected function formatMetrics(array $metrics): array
    {
        return [
            'views' => [
                'total' => $metrics['views']['total'] ?? 0,
                'unique' => $metrics['views']['unique'] ?? 0,
            ],
            'performance' => [
                'load_time' => [
                    'average' => round($metrics['performance']['load_time']['average'] ?? 0, 2),
                    'max' => round($metrics['performance']['load_time']['max'] ?? 0, 2),
                ],
                'memory_usage' => [
                    'average' => round($metrics['performance']['memory_usage']['average'] ?? 0, 2),
                    'peak' => round($metrics['performance']['memory_usage']['peak'] ?? 0, 2),
                ],
            ],
            'cache' => [
                'hits' => $metrics['cache']['hits'] ?? 0,
                'misses' => $metrics['cache']['misses'] ?? 0,
                'hit_rate' => round($metrics['cache']['hit_rate'] ?? 0, 2),
            ],
        ];
    }
}
