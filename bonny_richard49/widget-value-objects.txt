// app/Core/Widget/ValueObjects/WidgetIdentifier.php
<?php

namespace App\Core\Widget\ValueObjects;

use InvalidArgumentException;

class WidgetIdentifier
{
    private string $value;

    public function __construct(string $value)
    {
        $this->validate($value);
        $this->value = $value;
    }

    public function value(): string
    {
        return $this->value;
    }

    public function equals(WidgetIdentifier $other): bool
    {
        return $this->value === $other->value;
    }

    private function validate(string $value): void
    {
        if (!preg_match('/^[a-z0-9\-_]+$/', $value)) {
            throw new InvalidArgumentException('Invalid widget identifier format');
        }
    }
}

// app/Core/Widget/ValueObjects/WidgetSettings.php
<?php

namespace App\Core\Widget\ValueObjects;

use InvalidArgumentException;
use JsonSerializable;

class WidgetSettings implements JsonSerializable
{
    private array $settings;

    public function __construct(array $settings)
    {
        $this->validate($settings);
        $this->settings = $settings;
    }

    public function get(string $key, $default = null)
    {
        return $this->settings[$key] ?? $default;
    }

    public function set(string $key, $value): self
    {
        $this->settings[$key] = $value;
        return $this;
    }

    public function has(string $key): bool
    {
        return isset($this->settings[$key]);
    }

    public function remove(string $key): self
    {
        unset($this->settings[$key]);
        return $this;
    }

    public function merge(array $settings): self
    {
        $this->settings = array_merge($this->settings, $settings);
        return $this;
    }

    public function toArray(): array
    {
        return $this->settings;
    }

    public function jsonSerialize(): array
    {
        return $this->settings;
    }

    private function validate(array $settings): void
    {
        foreach ($settings as $key => $value) {
            if (!is_string($key)) {
                throw new InvalidArgumentException('Setting key must be a string');
            }
        }
    }
}

// app/Core/Widget/ValueObjects/WidgetVisibilityRules.php
<?php

namespace App\Core\Widget\ValueObjects;

use InvalidArgumentException;
use JsonSerializable;

class WidgetVisibilityRules implements JsonSerializable
{
    private array $conditions;
    private string $operator;

    public function __construct(array $conditions, string $operator = 'and')
    {
        $this->validate($conditions, $operator);
        $this->conditions = $conditions;
        $this->operator = strtolower($operator);
    }

    public function evaluate(array $context): bool
    {
        $results = array_map(
            fn($condition) => $this->evaluateCondition($condition, $context),
            $this->conditions
        );

        return $this->operator === 'and'
            ? !in_array(false, $results, true)
            : in_array(true, $results, true);
    }

    public function getConditions(): array
    {
        return $this->conditions;
    }

    public function getOperator(): string
    {
        return $this->operator;
    }

    public function jsonSerialize(): array
    {
        return [
            'conditions' => $this->conditions,
            'operator' => $this->operator
        ];
    }

    private function validate(array $conditions, string $operator): void
    {
        if (empty($conditions)) {
            throw new InvalidArgumentException('Conditions cannot be empty');
        }

        if (!in_array(strtolower($operator), ['and', 'or'])) {
            throw new InvalidArgumentException('Invalid operator');
        }

        foreach ($conditions as $condition) {
            if (!isset($condition['type'], $condition['value'])) {
                throw new InvalidArgumentException('Invalid condition format');
            }
        }
    }

    private function evaluateCondition(array $condition, array $context): bool
    {
        return match($condition['type']) {
            'role' => $this->evaluateRole($condition['value'], $context